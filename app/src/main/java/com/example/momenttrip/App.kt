package com.example.momenttrip

import android.app.Activity
import android.util.Log
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.compose.rememberNavController
import com.example.momenttrip.data.LoginType
import com.example.momenttrip.data.User
import com.example.momenttrip.navigation.AppNavGraph
import com.example.momenttrip.repository.UserRepository
import com.example.momenttrip.ui.screen.loading.AppLoadingScreen
import com.example.momenttrip.ui.screen.login.LoginScreen
import com.example.momenttrip.ui.screen.signup.GoogleSignUpExtraScreen
import com.example.momenttrip.ui.screen.signup.SignUpEntryPoint
import com.example.momenttrip.utils.toLocalDate
import com.example.momenttrip.viewmodel.TripViewModel
import com.example.momenttrip.viewmodel.UserViewModel
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.common.api.ApiException
import com.google.firebase.auth.FirebaseAuth
import kotlinx.coroutines.flow.filterNotNull
import kotlinx.coroutines.flow.first
import java.time.LocalDate

@Composable
fun AppEntryPoint() {
    val context = LocalContext.current
    val userViewModel: UserViewModel = viewModel()
    val tripViewModel: TripViewModel = viewModel()

    val isLoggedIn = remember { mutableStateOf(FirebaseAuth.getInstance().currentUser != null) }
    val isSignUpMode = remember { mutableStateOf(false) }
    val errorMessage = remember { mutableStateOf("") }

    val tripState by tripViewModel.currentTrip.collectAsState()
    val tripCreated by tripViewModel.tripCreated.collectAsState()

    val centerTab = remember { mutableStateOf<String?>(null) }
    val navController = rememberNavController()

    var initialized by remember { mutableStateOf(false) }
    val email = remember { mutableStateOf("") }
    val password = remember { mutableStateOf("") }


    // üîπ Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Îü∞Ï≤ò & ÏΩúÎ∞± Ï§ÄÎπÑ
    val googleLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.StartActivityForResult()
    ) { result ->
        val data = result.data
        if (result.resultCode != Activity.RESULT_OK || data == null) {
            userViewModel.isGoogleSignUpPending = false
            errorMessage.value = ""
            FirebaseAuth.getInstance().signOut()
            isLoggedIn.value = FirebaseAuth.getInstance().currentUser == null // ‚òÖ Î°úÍ∑∏ÏïÑÏõÉ ÌõÑ ÎèôÍ∏∞Ìôî
            return@rememberLauncherForActivityResult
        }

        val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)
        try {
            val account = task.getResult(ApiException::class.java)
            val idToken = account?.idToken
            if (idToken != null) {
                userViewModel.signInWithGoogleForSignUp(
                    idToken,
                    onSuccess = {   if (!userViewModel.isGoogleSignUpPending) {
                        isLoggedIn.value = true
                    }},
                    onError = { msg -> errorMessage.value = msg ?: "Íµ¨Í∏Ä Ïù∏Ï¶ù Ïã§Ìå®" }
                )
            } else {
                errorMessage.value = "Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ ÌÜ†ÌÅ∞ ÌöçÎìù Ïã§Ìå®"
            }
        } catch (e: Exception) {
            errorMessage.value = e.message ?: "Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Ïã§Ìå®"
        }
    }


    // Íµ¨Í∏Ä Î°úÍ∑∏Ïù∏ Ïù∏ÌÖêÌä∏ Ïã§Ìñâ Ìï®Ïàò
    fun launchGoogleSignIn() {
        val gso = com.google.android.gms.auth.api.signin.GoogleSignInOptions.Builder(
            com.google.android.gms.auth.api.signin.GoogleSignInOptions.DEFAULT_SIGN_IN
        )
            .requestIdToken(context.getString(R.string.default_web_client_id))
            .requestEmail()
            .build()
        val client = com.google.android.gms.auth.api.signin.GoogleSignIn.getClient(context, gso)
        googleLauncher.launch(client.signInIntent)
    }

    // üîπ Î°úÍ∑∏Ïù∏ ÌõÑ ÏÇ¨Ïö©Ïûê Î∞è Ïó¨Ìñâ Î∂àÎü¨Ïò§Í∏∞
    LaunchedEffect(isLoggedIn.value) {
        if (isLoggedIn.value) {
            userViewModel.loadCurrentUser()
            val user = userViewModel.user.filterNotNull().first()
            val tripId = user.current_trip_id
            if (!tripId.isNullOrBlank()) {
                tripViewModel.loadCurrentTrip(tripId)
                tripViewModel.currentTrip.filterNotNull().first()
                Log.d("DEBUG111", "Í∏∞Ï°¥ Ïó¨Ìñâ Î°úÎìú ÏôÑÎ£å")
            } else {
                Log.d("DEBUG111", "Í∏∞Ï°¥ Ïó¨Ìñâ ÏóÜÏùå")
                tripViewModel.resetTrip()
                centerTab.value = "addTrip"
                initialized = true
            }
        }
    }

    // üîπ Ïó¨Ìñâ ÏÉÅÌÉú Í∏∞Î∞ò centerTab Í≤∞Ï†ï
    LaunchedEffect(tripState) {
        Log.d("DEBUG111", "6")
        val trip = tripState
        if (trip != null) {
            Log.d("DEBUG111", "tripStateÍ∞Ä Ïú†Ìö®Ìï®: $trip")
            val today = LocalDate.now()
            val start = trip.start_date.toDate().toLocalDate()
            val end = trip.end_date.toDate().toLocalDate()

            if (today in start..end) {
                centerTab.value = "currentTrip"
                Log.d("DEBUG111", "‚úÖ ÌòÑÏû¨ Ïó¨Ìñâ Í∏∞Í∞Ñ ÏïàÏóê ÏûàÏùå ‚Üí currentTrip")
            } else {
                val user = UserRepository.getCurrentUser()
                user?.let {
                    UserRepository.finishTrip(it.uid, trip.trip_id)
                }
                tripViewModel.resetTrip()
                centerTab.value = "addTrip"
                Log.d("DEBUG111", "‚õî Ïó¨Ìñâ Í∏∞Í∞Ñ ÏïÑÎãò ‚Üí resetTrip + addTrip")
            }
            initialized = true
        }
        Log.d("DEBUG111", "9")
    }

    // üîπ Ïó¨Ìñâ ÏÉùÏÑ± ÏßÅÌõÑ Ï≤òÎ¶¨
    LaunchedEffect(tripCreated) {
        if (tripCreated) {
            val trip = tripViewModel.currentTrip.filterNotNull().first()
            Log.d("DEBUG111", "tripStateÍ∞Ä Ïú†Ìö®Ìï®: $trip")
            centerTab.value = "currentTrip"
            initialized = true
            tripViewModel.resetTripCreated()
        }
    }

    // üîπ Ïã§Ï†ú Î†åÎçîÎßÅ Ï°∞Í±¥
    when {
        // (1) Íµ¨Í∏Ä Ï∂îÍ∞ÄÏûÖÎ†• ÎåÄÍ∏∞
        userViewModel.isGoogleSignUpPending -> {
            GoogleSignUpExtraScreen(
                defaultName = userViewModel.tempGoogleUser?.displayName ?: "",
                onSubmit = { name, nickname, phone ->
                    val firebaseUser = userViewModel.tempGoogleUser
                    if (firebaseUser != null) {
                        val user = User(
                            uid = firebaseUser.uid,
                            email = firebaseUser.email ?: "",
                            login_type = LoginType.GOOGLE,
                            name = name,
                            nickname = nickname,
                            phone_number = phone,
                            profile_url = firebaseUser.photoUrl?.toString(),
                            created_at = com.google.firebase.Timestamp.now()
                        )
                        userViewModel.finalizeGoogleSignUp(user) {
                            userViewModel.isGoogleSignUpPending = false
                            isLoggedIn.value = true
                        }
                    }
                },
                onBack = {
                    // ÏÉÅÌÉú ÏôÑÏ†Ñ Ï¥àÍ∏∞Ìôî
                    userViewModel.isGoogleSignUpPending = false
                    userViewModel.tempGoogleUser = null
                    FirebaseAuth.getInstance().signOut()
                    isLoggedIn.value = false

                }
            )
        }
        // 1. Ïù¥ÎØ∏ Î°úÍ∑∏Ïù∏ + Ïó¨Ìñâ Ï†ïÎ≥¥ÍπåÏßÄ Ï§ÄÎπÑÎêú Í≤ΩÏö∞ (Î©îÏù∏ ÌôîÎ©¥)
        isLoggedIn.value && centerTab.value != null && initialized -> {
            AppNavGraph(
                navController = navController,
                isLoggedIn = true,
                centerTab = centerTab.value!!,
                onLogout = {
                    userViewModel.logout(context) {
                        isLoggedIn.value = false
                    }
                },
                tripViewModel = tripViewModel,
                userViewModel = userViewModel
            )
        }

        // 3. Ïù¥Î©îÏùº/ÎπÑÎ∞ÄÎ≤àÌò∏ ÌöåÏõêÍ∞ÄÏûÖ
        !isLoggedIn.value -> {
            if (isSignUpMode.value) {
                SignUpEntryPoint(
                    onSuccess = {
                        isSignUpMode.value = false
                        isLoggedIn.value = true
                    },
                    onCancel = { isSignUpMode.value = false }
                )
            } else {
                LoginScreen(
                    email = email.value,
                    password = password.value,
                    errorMessage = errorMessage.value,
                    onEmailChange = { email.value = it },
                    onPasswordChange = { password.value = it },
                    onLoginClick = {
                        Log.d("LoginFlow", "Î°úÍ∑∏Ïù∏ ÏãúÎèÑ: email=${email.value}")
                        userViewModel.login(
                            email = email.value,
                            password = password.value,
                            callback = { success, message ->
                                if (success) {
                                    Log.d("LoginFlow", "Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ!")
                                    isLoggedIn.value = true
                                } else {
                                    Log.e("LoginFlow", "Î°úÍ∑∏Ïù∏ Ïã§Ìå®: $message")
                                    errorMessage.value = message ?: "Î°úÍ∑∏Ïù∏ Ïã§Ìå®"
                                }
                            }
                        )
                    },
                    onSignUpClick = { isSignUpMode.value = true },
                    onGoogleLogin = { launchGoogleSignIn() }
                )
            }
        }

        // 4. Î°úÎî© Ïä§ÌîºÎÑà
        else -> {
            AppLoadingScreen()
        }
    }


}


